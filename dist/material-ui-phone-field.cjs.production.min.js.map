{"version":3,"file":"material-ui-phone-field.cjs.production.min.js","sources":["../src/PhoneField/countries.ts","../src/PhoneField/CountrySelect.tsx","../src/PhoneField/PhoneNumberField.tsx","../src/PhoneField/index.tsx"],"sourcesContent":["import {\n  getCountryCallingCode,\n  isSupportedCountry,\n  CountryCode,\n} from 'libphonenumber-js'\nimport isoCountries from 'i18n-iso-countries'\n\nexport const getCallingCode: (iso: string) => string | undefined = function(\n  iso\n) {\n  try {\n    return getCountryCallingCode(iso as CountryCode) as string\n  } catch (err) {\n    return undefined\n  }\n}\n\ninterface StringMap {\n  [key: string]: string\n}\n\nisoCountries.registerLocale(require('i18n-iso-countries/langs/en.json'))\nisoCountries.registerLocale(require('i18n-iso-countries/langs/ru.json'))\n\nfunction makeCountriesObject() {\n  const codes = Object.keys(isoCountries.getAlpha2Codes())\n\n  const countriesObject: StringMap = {}\n\n  for (const code of codes) {\n    if (isSupportedCountry(code)) {\n      const callingCode = getCallingCode(code)\n      if (callingCode) {\n        countriesObject[code] = callingCode\n      }\n    }\n  }\n\n  return countriesObject\n}\n\nexport const countries: StringMap = makeCountriesObject()\nexport const isoCountryCodes = Object.keys(countries)\n","import React, { ChangeEvent, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport countries from 'i18n-iso-countries'\nimport { Typography, useTheme, Grid } from '@material-ui/core'\nimport { getCallingCode } from './countries'\n// import { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\n// const useStyles = makeStyles((theme: Theme) =>\n//   createStyles({\n//     listItem: {\n//       whiteSpace: 'normal'\n//     },\n//     callingCode: {\n//       fontWeight: theme.typography.fontWeightMedium\n//     },\n//   }),\n// );\n\ninterface CountryProps {\n  value: string\n  onChange: (e: ChangeEvent<{ value: unknown }>) => void\n  displayCountries?: string[]\n  language?: string\n}\n\nfunction CountrySelect({\n  value,\n  onChange,\n  displayCountries = [],\n  language = 'en',\n}: CountryProps) {\n  const theme = useTheme()\n  const names = useMemo(() => countries.getNames(language), [language])\n\n  // if (!names.length) {\n  //   console.error('Country names list is empty. You\\'ve probably haven\\'t registered the language in which the country list is displayed. Use registerLocale function to register the language.')\n  // }\n\n  const isoCodes = useMemo(\n    () =>\n      displayCountries != null && displayCountries.length\n        ? displayCountries\n        : Object.keys(names),\n    [displayCountries, names]\n  )\n\n  const countryName: (code: string) => string = useMemo(\n    () => code => names[code] || code,\n    [names]\n  )\n\n  const countriesAndCodes = useMemo(() => {\n    let result = []\n\n    for (const isoCode of isoCodes) {\n      const callingCode = getCallingCode(isoCode)\n      if (!callingCode) continue\n      result.push([\n        isoCode.toUpperCase(),\n        countryName(isoCode),\n        `+${callingCode}`,\n      ])\n    }\n\n    return result\n  }, [isoCodes, countryName])\n\n  return (\n    <FormControl>\n      <Select\n        value={value}\n        onChange={onChange}\n        displayEmpty\n        renderValue={value => {\n          const code = value as string\n          if (!code.length) {\n            return <Typography>â€”</Typography>\n          }\n\n          return <Typography>{`+${getCallingCode(code)}`}</Typography>\n        }}\n      >\n        {countriesAndCodes.map(([isoCode, country, callingCode]: string[]) => {\n          return (\n            <MenuItem\n              key={isoCode}\n              value={isoCode}\n              style={{ whiteSpace: 'normal' }}\n            >\n              <Grid container spacing={1}>\n                <Grid item xs={9}>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    {country}\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  <Typography\n                    variant=\"body2\"\n                    style={{ fontWeight: theme.typography.fontWeightMedium }}\n                  >\n                    {callingCode}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </MenuItem>\n          )\n        })}\n      </Select>\n    </FormControl>\n  )\n}\n\nCountrySelect.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  language: PropTypes.string,\n}\n\nexport default CountrySelect\n","import React, { ChangeEvent, useCallback } from 'react'\nimport { TextField } from '@material-ui/core'\n// import { getCallingCode } from './countries';\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { AsYouType, parseDigits, CountryCode } from 'libphonenumber-js'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    input: {\n      lineHeight: '1.5',\n      height: 'auto',\n    },\n  })\n)\n\ninterface PhoneNumberFieldProps {\n  value: string\n  onChange: (e: string) => void\n  country: string\n  className?: string\n}\n\nfunction PhoneNumberField({\n  value,\n  onChange,\n  country,\n  className,\n}: PhoneNumberFieldProps) {\n  // const getInitialParsedValue = () => formattedToPlain(value, country)\n\n  // const plusCallingCode = `+${getCallingCode(country)}`\n  const classes = useStyles()\n  const parsedValue = plainToFormatted(value, country)\n\n  const handleChange = useCallback(\n    (e: ChangeEvent<{ value: unknown }>) => {\n      // setParsedValue(e.target.value as string)\n      onChange(formattedToPlain(e.target.value as string, country))\n    },\n    [onChange, country]\n  )\n\n  // useEffect(() => {\n  //   setParsedValue(getInitialParsedValue())\n  // }, [country])\n\n  // useEffect(() => {\n  //   if (value !== parsedValue) {\n  //     setParsedValue(getInitialParsedValue())\n  //   }\n  // }, [value])\n\n  // useEffect(() => {\n  //   setParsedValue(new AsYouType(country as CountryCode).input(`${plusCallingCode}${parsedValue}`))\n  // }, [parsedValue, country, plusCallingCode])\n\n  // useEffect(() => {\n  //   if (value !== parsedValue) {\n  //     onChange(parsedValue)\n  //   }\n  // }, [parsedValue])\n\n  return (\n    <TextField\n      value={parsedValue}\n      onChange={handleChange}\n      className={className}\n      size=\"medium\"\n      InputProps={{\n        // startAdornment: <InputAdornment position='start'>{plusCallingCode}</InputAdornment>,\n        classes: { input: classes.input },\n      }}\n    />\n  )\n}\n\nexport default PhoneNumberField\n\nfunction formattedToPlain(value: string, country: string) {\n  if (!value) {\n    return ''\n  }\n\n  if (!country) {\n    return value\n  }\n\n  const asYouType = new AsYouType(country as CountryCode)\n  asYouType.input(value)\n\n  const phoneNumber = asYouType.getNumber()\n\n  if (phoneNumber) {\n    if (country) {\n      return parseDigits(\n        phoneNumber.format('NATIONAL', { nationalPrefix: false })\n      )\n    }\n\n    return value\n  }\n\n  return ''\n}\n\nfunction plainToFormatted(value: string, country: string) {\n  if (!value) {\n    return ''\n  }\n\n  if (!country) {\n    return value\n  }\n\n  const asYouType = new AsYouType(country as CountryCode)\n  asYouType.input(value)\n\n  const phoneNumber = asYouType.getNumber()\n\n  if (phoneNumber) {\n    if (country) {\n      return phoneNumber.format('NATIONAL', { nationalPrefix: false })\n    }\n\n    return value\n  }\n\n  return ''\n}\n","import React, { useState, useCallback, ChangeEvent, useEffect } from 'react'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport clsx from 'clsx'\nimport CountrySelect from './CountrySelect'\nimport { isoCountryCodes, getCallingCode } from './countries'\nimport PhoneNumberField from './PhoneNumberField'\nimport { parsePhoneNumberFromString } from 'libphonenumber-js'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      alignContent: 'center',\n      // alignItems: 'baseline',\n      '& > *:first-child': {\n        marginRight: theme.spacing(2),\n      },\n    },\n    fullWidth: {\n      width: '100%',\n    },\n    field: {\n      flex: 1,\n    },\n  })\n)\n\ninterface PhoneFieldProps {\n  value: string\n  onChange: (value: string) => void\n  defaultCountry?: string\n  fullWidth?: boolean\n  language?: string\n}\n\nfunction returnValue(country: string, phoneValue: string) {\n  if (!phoneValue.length) return ''\n  if (!country.length) return phoneValue\n\n  const callingCode = getCallingCode(country)\n  if (!callingCode) return phoneValue\n\n  return `+${callingCode}${phoneValue}`\n}\n\nfunction getValueCountry(value: string) {\n  if (!value) return ''\n\n  const phoneNumber = parsePhoneNumberFromString(value)\n  if (!phoneNumber) return ''\n\n  return phoneNumber.country || ''\n}\n\nconst PhoneField = ({\n  value,\n  onChange,\n  defaultCountry,\n  fullWidth,\n  language,\n}: PhoneFieldProps) => {\n  const classes = useStyles()\n  const [country, setCountry] = useState(\n    getValueCountry(value) || defaultCountry || ''\n  )\n  const [phoneValue, setPhoneValue] = useState('')\n\n  const change = useCallback(\n    (country: string, phoneValue: string) => {\n      onChange(returnValue(country, phoneValue))\n    },\n    [onChange]\n  )\n\n  const handleCountryChange = useCallback(\n    (event: ChangeEvent<{ value: unknown }>) => {\n      const newCountry = event.target.value as string\n      setCountry(newCountry)\n      change(newCountry, phoneValue)\n    },\n    [setCountry, change, phoneValue]\n  )\n\n  const handleTextChange = useCallback(\n    (value: string) => {\n      setPhoneValue(value)\n      change(country, value)\n    },\n    [setPhoneValue, change, country]\n  )\n\n  useEffect(() => {\n    const newCountry = getValueCountry(value)\n    if (newCountry) {\n      setCountry(newCountry)\n    }\n  }, [value])\n\n  return (\n    <div className={clsx(classes.root, fullWidth && classes.fullWidth)}>\n      <CountrySelect\n        value={country || ''}\n        onChange={handleCountryChange}\n        displayCountries={isoCountryCodes}\n        language={language}\n      />\n      <PhoneNumberField\n        value={value}\n        onChange={handleTextChange}\n        country={country}\n        className={classes.field}\n      />\n    </div>\n  )\n}\n\nexport default PhoneField\n"],"names":["getCallingCode","iso","getCountryCallingCode","err","makeCountriesObject","countriesObject","Object","keys","isoCountries","getAlpha2Codes","code","isSupportedCountry","callingCode","registerLocale","require","isoCountryCodes","CountrySelect","value","onChange","displayCountries","language","theme","useTheme","names","useMemo","countries","getNames","isoCodes","length","countryName","countriesAndCodes","result","isoCode","push","toUpperCase","React","FormControl","Select","displayEmpty","renderValue","Typography","map","MenuItem","key","style","whiteSpace","Grid","container","spacing","item","xs","variant","color","fontWeight","typography","fontWeightMedium","propTypes","PropTypes","string","func","isRequired","useStyles","makeStyles","createStyles","input","lineHeight","height","PhoneNumberField","country","className","classes","parsedValue","asYouType","AsYouType","phoneNumber","getNumber","format","nationalPrefix","plainToFormatted","handleChange","useCallback","e","parseDigits","formattedToPlain","target","TextField","size","InputProps","root","display","alignContent","marginRight","fullWidth","width","field","flex","getValueCountry","parsePhoneNumberFromString","defaultCountry","useState","setCountry","phoneValue","setPhoneValue","change","returnValue","handleCountryChange","event","newCountry","handleTextChange","useEffect","clsx"],"mappings":"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"}