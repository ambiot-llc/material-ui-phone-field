{"version":3,"file":"material-ui-phone-field.cjs.development.js","sources":["../src/PhoneField/countries.ts","../src/PhoneField/CountrySelect.tsx","../src/PhoneField/PhoneNumberField.tsx","../src/PhoneField/index.tsx"],"sourcesContent":["import {\n  getCountryCallingCode,\n  isSupportedCountry,\n  CountryCode,\n} from 'libphonenumber-js'\nimport isoCountries from 'i18n-iso-countries'\n\nexport const getCallingCode: (iso: string) => string | undefined = function(\n  iso\n) {\n  try {\n    return getCountryCallingCode(iso as CountryCode) as string\n  } catch (err) {\n    return undefined\n  }\n}\n\ninterface StringMap {\n  [key: string]: string\n}\n\nisoCountries.registerLocale(require('i18n-iso-countries/langs/en.json'))\nisoCountries.registerLocale(require('i18n-iso-countries/langs/ru.json'))\n\nfunction makeCountriesObject() {\n  const codes = Object.keys(isoCountries.getAlpha2Codes())\n\n  const countriesObject: StringMap = {}\n\n  for (const code of codes) {\n    if (isSupportedCountry(code)) {\n      const callingCode = getCallingCode(code)\n      if (callingCode) {\n        countriesObject[code] = callingCode\n      }\n    }\n  }\n\n  return countriesObject\n}\n\nexport const countries: StringMap = makeCountriesObject()\nexport const isoCountryCodes = Object.keys(countries)\n","import React, { ChangeEvent, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport countries from 'i18n-iso-countries'\nimport { Typography, useTheme, Grid } from '@material-ui/core'\nimport { getCallingCode } from './countries'\n// import { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\n// const useStyles = makeStyles((theme: Theme) =>\n//   createStyles({\n//     listItem: {\n//       whiteSpace: 'normal'\n//     },\n//     callingCode: {\n//       fontWeight: theme.typography.fontWeightMedium\n//     },\n//   }),\n// );\n\ninterface CountryProps {\n  value: string\n  onChange: (e: ChangeEvent<{ value: unknown }>) => void\n  displayCountries?: string[]\n  language?: string\n}\n\nfunction CountrySelect({\n  value,\n  onChange,\n  displayCountries = [],\n  language = 'en',\n}: CountryProps) {\n  const theme = useTheme()\n  const names = useMemo(() => countries.getNames(language), [language])\n\n  // if (!names.length) {\n  //   console.error('Country names list is empty. You\\'ve probably haven\\'t registered the language in which the country list is displayed. Use registerLocale function to register the language.')\n  // }\n\n  const isoCodes = useMemo(\n    () =>\n      displayCountries != null && displayCountries.length\n        ? displayCountries\n        : Object.keys(names),\n    [displayCountries, names]\n  )\n\n  const countryName: (code: string) => string = useMemo(\n    () => code => names[code] || code,\n    [names]\n  )\n\n  const countriesAndCodes = useMemo(() => {\n    let result = []\n\n    for (const isoCode of isoCodes) {\n      const callingCode = getCallingCode(isoCode)\n      if (!callingCode) continue\n      result.push([\n        isoCode.toUpperCase(),\n        countryName(isoCode),\n        `+${callingCode}`,\n      ])\n    }\n\n    return result\n  }, [isoCodes, countryName])\n\n  return (\n    <FormControl>\n      <Select\n        value={value}\n        onChange={onChange}\n        displayEmpty\n        renderValue={value => {\n          const code = value as string\n          if (!code.length) {\n            return <Typography>â€”</Typography>\n          }\n\n          return <Typography>{`+${getCallingCode(code)}`}</Typography>\n        }}\n      >\n        {countriesAndCodes.map(([isoCode, country, callingCode]: string[]) => {\n          return (\n            <MenuItem\n              key={isoCode}\n              value={isoCode}\n              style={{ whiteSpace: 'normal' }}\n            >\n              <Grid container spacing={1}>\n                <Grid item xs={9}>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    {country}\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  <Typography\n                    variant=\"body2\"\n                    style={{ fontWeight: theme.typography.fontWeightMedium }}\n                  >\n                    {callingCode}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </MenuItem>\n          )\n        })}\n      </Select>\n    </FormControl>\n  )\n}\n\nCountrySelect.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  language: PropTypes.string,\n}\n\nexport default CountrySelect\n","import React, { ChangeEvent, useCallback } from 'react'\nimport { TextField } from '@material-ui/core'\n// import { getCallingCode } from './countries';\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { AsYouType, parseDigits, CountryCode } from 'libphonenumber-js'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    input: {\n      lineHeight: '1.5',\n      height: 'auto',\n    },\n  })\n)\n\ninterface PhoneNumberFieldProps {\n  value: string\n  onChange: (e: string) => void\n  country: string\n  className?: string\n}\n\nfunction PhoneNumberField({\n  value,\n  onChange,\n  country,\n  className,\n}: PhoneNumberFieldProps) {\n  // const getInitialParsedValue = () => formattedToPlain(value, country)\n\n  // const plusCallingCode = `+${getCallingCode(country)}`\n  const classes = useStyles()\n  const parsedValue = plainToFormatted(value, country)\n\n  const handleChange = useCallback(\n    (e: ChangeEvent<{ value: unknown }>) => {\n      // setParsedValue(e.target.value as string)\n      onChange(formattedToPlain(e.target.value as string, country))\n    },\n    [onChange, country]\n  )\n\n  // useEffect(() => {\n  //   setParsedValue(getInitialParsedValue())\n  // }, [country])\n\n  // useEffect(() => {\n  //   if (value !== parsedValue) {\n  //     setParsedValue(getInitialParsedValue())\n  //   }\n  // }, [value])\n\n  // useEffect(() => {\n  //   setParsedValue(new AsYouType(country as CountryCode).input(`${plusCallingCode}${parsedValue}`))\n  // }, [parsedValue, country, plusCallingCode])\n\n  // useEffect(() => {\n  //   if (value !== parsedValue) {\n  //     onChange(parsedValue)\n  //   }\n  // }, [parsedValue])\n\n  return (\n    <TextField\n      value={parsedValue}\n      onChange={handleChange}\n      className={className}\n      size=\"medium\"\n      InputProps={{\n        // startAdornment: <InputAdornment position='start'>{plusCallingCode}</InputAdornment>,\n        classes: { input: classes.input },\n      }}\n    />\n  )\n}\n\nexport default PhoneNumberField\n\nfunction formattedToPlain(value: string, country: string) {\n  if (!value) {\n    return ''\n  }\n\n  if (!country) {\n    return value\n  }\n\n  const asYouType = new AsYouType(country as CountryCode)\n  asYouType.input(value)\n\n  const phoneNumber = asYouType.getNumber()\n\n  if (phoneNumber) {\n    if (country) {\n      return parseDigits(\n        phoneNumber.format('NATIONAL', { nationalPrefix: false })\n      )\n    }\n\n    return value\n  }\n\n  return ''\n}\n\nfunction plainToFormatted(value: string, country: string) {\n  if (!value) {\n    return ''\n  }\n\n  if (!country) {\n    return value\n  }\n\n  const asYouType = new AsYouType(country as CountryCode)\n  asYouType.input(value)\n\n  const phoneNumber = asYouType.getNumber()\n\n  if (phoneNumber) {\n    if (country) {\n      return phoneNumber.format('NATIONAL', { nationalPrefix: false })\n    }\n\n    return value\n  }\n\n  return ''\n}\n","import React, { useState, useCallback, ChangeEvent, useEffect } from 'react'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport clsx from 'clsx'\nimport CountrySelect from './CountrySelect'\nimport { isoCountryCodes, getCallingCode } from './countries'\nimport PhoneNumberField from './PhoneNumberField'\nimport { parsePhoneNumberFromString } from 'libphonenumber-js'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      alignContent: 'center',\n      // alignItems: 'baseline',\n      '& > *:first-child': {\n        marginRight: theme.spacing(2),\n      },\n    },\n    fullWidth: {\n      width: '100%',\n    },\n    field: {\n      flex: 1,\n    },\n  })\n)\n\ninterface PhoneFieldProps {\n  value: string\n  onChange: (value: string) => void\n  defaultCountry?: string\n  fullWidth?: boolean\n  language?: string\n}\n\nfunction returnValue(country: string, phoneValue: string) {\n  if (!phoneValue.length) return ''\n  if (!country.length) return phoneValue\n\n  const callingCode = getCallingCode(country)\n  if (!callingCode) return phoneValue\n\n  return `+${callingCode}${phoneValue}`\n}\n\nfunction getValueCountry(value: string) {\n  if (!value) return ''\n\n  const phoneNumber = parsePhoneNumberFromString(value)\n  if (!phoneNumber) return ''\n\n  return phoneNumber.country || ''\n}\n\nconst PhoneField = ({\n  value,\n  onChange,\n  defaultCountry,\n  fullWidth,\n  language,\n}: PhoneFieldProps) => {\n  const classes = useStyles()\n  const [country, setCountry] = useState(\n    getValueCountry(value) || defaultCountry || ''\n  )\n  const [phoneValue, setPhoneValue] = useState('')\n\n  const change = useCallback(\n    (country: string, phoneValue: string) => {\n      onChange(returnValue(country, phoneValue))\n    },\n    [onChange]\n  )\n\n  const handleCountryChange = useCallback(\n    (event: ChangeEvent<{ value: unknown }>) => {\n      const newCountry = event.target.value as string\n      setCountry(newCountry)\n      change(newCountry, phoneValue)\n    },\n    [setCountry, change, phoneValue]\n  )\n\n  const handleTextChange = useCallback(\n    (value: string) => {\n      setPhoneValue(value)\n      change(country, value)\n    },\n    [setPhoneValue, change, country]\n  )\n\n  useEffect(() => {\n    const newCountry = getValueCountry(value)\n    if (newCountry) {\n      setCountry(newCountry)\n    }\n  }, [value])\n\n  return (\n    <div className={clsx(classes.root, fullWidth && classes.fullWidth)}>\n      <CountrySelect\n        value={country || ''}\n        onChange={handleCountryChange}\n        displayCountries={isoCountryCodes}\n        language={language}\n      />\n      <PhoneNumberField\n        value={value}\n        onChange={handleTextChange}\n        country={country}\n        className={classes.field}\n      />\n    </div>\n  )\n}\n\nexport default PhoneField\n"],"names":["getCallingCode","iso","getCountryCallingCode","err","undefined","isoCountries","registerLocale","require","makeCountriesObject","codes","Object","keys","getAlpha2Codes","countriesObject","code","isSupportedCountry","callingCode","countries","isoCountryCodes","CountrySelect","value","onChange","displayCountries","language","theme","useTheme","names","useMemo","getNames","isoCodes","length","countryName","countriesAndCodes","result","isoCode","push","toUpperCase","React","FormControl","Select","displayEmpty","renderValue","Typography","map","country","MenuItem","key","style","whiteSpace","Grid","container","spacing","item","xs","variant","color","fontWeight","typography","fontWeightMedium","propTypes","PropTypes","string","func","isRequired","useStyles","makeStyles","createStyles","input","lineHeight","height","PhoneNumberField","className","classes","parsedValue","plainToFormatted","handleChange","useCallback","e","formattedToPlain","target","TextField","size","InputProps","asYouType","AsYouType","phoneNumber","getNumber","parseDigits","format","nationalPrefix","root","display","alignContent","marginRight","fullWidth","width","field","flex","returnValue","phoneValue","getValueCountry","parsePhoneNumberFromString","PhoneField","defaultCountry","useState","setCountry","setPhoneValue","change","handleCountryChange","event","newCountry","handleTextChange","useEffect","clsx"],"mappings":"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"}